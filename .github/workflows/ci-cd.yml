name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  GO_VERSION: '1.23'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        module: [proxy, admin]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.module }}-${{ hashFiles(format('{0}/go.sum', matrix.module)) }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.module }}-

      - name: Install dependencies
        working-directory: ./${{ matrix.module }}
        run: go mod download

      - name: Run tests
        working-directory: ./${{ matrix.module }}
        run: |
          # Check if test files exist
          if find . -name "*_test.go" -type f | grep -q .; then
            echo "Running tests for ${{ matrix.module }}..."
            go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          else
            echo "No test files found in ${{ matrix.module }}, skipping tests"
          fi

      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.61.0
          working-directory: ./${{ matrix.module }}
          args: --timeout=5m
          
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [proxy, admin]
        include:
          - service: proxy
            port: 8090
          - service: admin
            port: 8091

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for ${{ matrix.service }}
        working-directory: ./${{ matrix.service }}
        run: |
          docker build -t ${{ matrix.service }}:test .

      - name: Test Docker image for ${{ matrix.service }}
        run: |
          # Run container briefly to ensure it starts
          docker run -d --name test-${{ matrix.service }} -p ${{ matrix.port }}:${{ matrix.port }} ${{ matrix.service }}:test
          sleep 5
          docker logs test-${{ matrix.service }}
          docker stop test-${{ matrix.service }}
          docker rm test-${{ matrix.service }}
          
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            # Set up environment
            export PATH=$PATH:/usr/local/bin:/usr/bin
            
            # Run deployment
            echo "Starting deployment..."
            /home/pluggedin/registry/deploy.sh
            
      - name: Verify deployment
        run: |
          # Wait for deployment
          sleep 15
          
          # Check health endpoint
          RESPONSE=$(curl -s https://registry.plugged.in/v0/health)
          echo "Health check response: $RESPONSE"
          
          # Verify response
          if echo "$RESPONSE" | grep -q '"status":"ok"'; then
            echo "✅ Deployment successful"
          else
            echo "❌ Deployment verification failed"
            exit 1
          fi
          
      - name: Create deployment record
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 1,
              state: 'success',
              environment_url: 'https://registry.plugged.in',
              description: 'Deployment successful'
            });